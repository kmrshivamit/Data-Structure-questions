347. Top K Frequent Elements
Medium

3534

222

Add to List

Share
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.


code:
class Solution {
    public int[] topKFrequent(int[] nums, int t) {
        
        HashMap<Integer,Integer> hm=new HashMap<>();
        
        for(int i=0;i<nums.length;i++)
        {
            if(hm.get(nums[i])==null)
                hm.put(nums[i],1);
            else
            {
             int  count=hm.get(nums[i]);
                hm.put(nums[i],++count);
                
            }
            
            
        }
        System.out.println(hm);
        
        Queue<Integer> heap=new PriorityQueue<>(
        (n1,n2)->hm.get(n1)-hm.get(n2));
        
        
       int ans[]=new int[t];
       
        
        int k=0;
        for(int i:hm.keySet())
        {k++;
            heap.add(i);
            if(k>t)
                heap.poll();
            
        }
        System.out.println(heap);
        int i=0;
        while(heap.peek()!=null)
        {
            ans[i++]=heap.poll();
        }

   return    reverse(ans);
    }
    
    
  static   int [] reverse(int A[])
    {
        int i=0,j=A.length-1;
        while(j>i)
        {
            int temp=A[i];
            A[i++]=A[j];
            A[j--]=temp;
            
        }
        return A;
    }
}
