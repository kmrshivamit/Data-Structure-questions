
public class NQueen {
	static int getCont(boolean board[][])
	{int count=0;
	
		for( int row=0;row<board.length;row++)
			for(int col=0;col<board.length;col++)
				if(board[row][col])
					count++;
		return count;
	}
	
	static void showBoard(boolean board[][])
	{
		for(int row=0;row<board.length;row++)
		{
			for(int col=0;col<board.length;col++)
			{
				System.out.print(board[row][col]+" ");
				
				
			}
			System.out.println();
		}
		
	}
	
	
	
	static boolean canPlace(boolean board[][],int row,int col)
	{//for column
		
		for(int i=row;i>=0;i--)
			
		{
			if(board[i][col]) {
				return false;
		}
			
		}
		
		
		//for upperdiagonalleft
		
		for(int i=row,j=col;i>=0&&j>=0;i--,j--)
		{
			if(board[i][j])
				return false;
		}
			
		//for lupper diagonal right
		
		for(int i=row,j=col;i>=0&&j<board[i].length;i--,j++) {
			if(board[i][j])
				return false;
				
		}
		
		return true;
	}
	
	static void placeQueens(boolean board[][],int row)
	{
		if(row==board.length)
		{
			System.out.println(getCont(board));
			showBoard(board);
			return;
	}
		for(int col=0   ;col<board[row].length;col++) {
			if(canPlace(board,row,col)) {
			board[row][col]=true;
			placeQueens(board,row+1);
			board[row][col]=false;
			
		}}

	}
	
	public static void main(String[] args)
	{
		boolean board[][]=new boolean[4][4];
		
		placeQueens(board,0);
		System.out.println("done");	
	}

}
